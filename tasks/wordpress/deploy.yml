#file: noinspection YAMLSchemaValidation
---

- name: "Create configuration file for projects"
  ansible.builtin.template:
    src: wordpress.j2
    dest: "{{ steamengine_project_root_path }}/.env"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
  tags:
    - steamengine_deploy_env

- name: "Download build {{ steamengine_build_url }}"
  ansible.builtin.get_url:
    url: "{{ steamengine_build_url }}"
    dest: "{{ steamengine_project_root_path }}/project.zip"
    checksum: "{{ checksum_verified }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
    headers: "{{ steamengine_build_url_headers }}"
    validate_certs: "{{ steamengine_build_url_validate_certs }}"
  register: get_url_build
  tags:
    - steamengine_deploy_wordpress

- name: "Is there a new build: {{ get_url_build.changed }}"
  ansible.builtin.set_fact:
    new_build_to_deploy: "{{ get_url_build.changed }}"

- include_tasks:
    file: "include/deploy_database.yml"
    apply:
      tags:
        - deploy
  when: new_build_to_deploy is defined and new_build_to_deploy and steamengine_project_dump_bdd_url is defined and steamengine_project_dump_bdd_url != ''
  tags:
    - steamengine_deploy_wordpress
    - steamengine_deploy_database

- name: "Create www directory"
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path_web }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
    state: directory
  tags:
    - steamengine_deploy_wordpress

- name: Update www directory
  include_tasks: include/update_from_archive.yml
  vars:
    archive_path: "{{ steamengine_project_root_path }}/project.zip"
    dest_path: "{{ steamengine_project_wordpress_new_release_path }}"
  when: new_build_to_deploy is defined and new_build_to_deploy
  args:
    apply:
      tags:
        - steamengine_deploy
        - steamengine_deploy_wordpress
  tags:
    - steamengine_deploy_wordpress

- name: "Add read permission for {{ steamengine_app_user }}"
  ansible.builtin.file:
    path: "{{ steamengine_project_root_path_web }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    recurse: true
    mode: u=rwx,g=rx,o=
  tags:
    - steamengine_deploy_wordpress

- name: Is there a uploads directory
  ansible.builtin.stat:
    path: "{{ steamengine_project_wordpress_uploads_path }}"
  register: project_uploads_directory_exist
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: "Is there a current release : {{ steamengine_project_wordpress_current_release_path }}"
  ansible.builtin.stat:
    path: "{{ steamengine_project_wordpress_current_release_path }}"
  register: project_current_release_exist
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Copy uploads directory from current release to home
  ansible.builtin.copy:
    src: "{{ steamengine_project_wordpress_current_release_path }}/web/app/uploads"
    dest: "{{ steamengine_project_root_path }}"
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    remote_src: true
    mode: u=rwx,g=rx,o=
  when: new_build_to_deploy is defined and new_build_to_deploy and not project_uploads_directory_exist.stat.exists and project_current_release_exist.stat.exists

- name: "Ensure {{ steamengine_project_wordpress_uploads_path }} has the right permissions"
  ansible.builtin.file:
    path: "{{ steamengine_project_wordpress_uploads_path }}"
    state: directory
    mode: u=rwx,g=rx,o=
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Clean new release directory
  ansible.builtin.file:
    path: "{{ steamengine_project_wordpress_new_release_path }}"
    state: absent
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Create new release directory
  ansible.builtin.file:
    path: "{{ steamengine_project_wordpress_new_release_path }}"
    state: directory
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
    mode: u=rwx,g=rx,o=
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Create all symlink
  ansible.builtin.file:
    src: "{{ item.path }}"
    dest: "{{ project_new_release }}/{{ item.symlink_src }}"
    state: link
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
  with_items: "{{ steamengine_project_wordpress_symlinks }}"
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Move current release to old release
  ansible.builtin.command: "mv {{ steamengine_project_wordpress_current_release_path }} {{ steamengine_project_wordpress_old_release_path }}"
  when: new_build_to_deploy is defined and new_build_to_deploy and project_current_release_exist.stat.exists

- name: Switch symlink on old release
  ansible.builtin.file:
    src: "{{ steamengine_project_wordpress_old_release_path }}"
    dest: "{{ steamengine_project_root_path }}"
    state: link
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
  when: new_build_to_deploy is defined and new_build_to_deploy and project_current_release_exist.stat.exists

- name: Clean old release directory
  ansible.builtin.file:
    path: "{{ steamengine_project_wordpress_old_release_path }}"
    state: absent
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Move next release to current release
  ansible.builtin.command: "mv {{ steamengine_project_wordpress_new_release_path }} {{ steamengine_project_wordpress_current_release_path }}"
  when: new_build_to_deploy is defined and new_build_to_deploy

- name: Switch symlink on the new current release
  ansible.builtin.file:
    src: "{{ steamengine_project_wordpress_current_release_path }}"
    dest: "{{ steamengine_project_root_path }}"
    state: link
    owner: "{{ steamengine_project_user }}"
    group: "{{ steamengine_app_user }}"
  when: new_build_to_deploy is defined and new_build_to_deploy
